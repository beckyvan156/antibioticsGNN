set.seed(1234)
cv.error = rep(0,4)
for ( i in 1:4) {
glm.fit = glm(y~poly(x,i),data = all.data)
cv.error[i]= cv.glm(all.data,glm.fit)$delta[1]
}
cv.error=as.data.frame(cv.error)
rownames(cv.error)=c('model i','model ii','model iii','model iv')
kable(cv.error,align = 'l')
(0.89*0.0428)/2.147
0.0741-4.882*((0.89*0.0428)/2.147)
x=(1:100)
y=x*0.9
plot(x,y)
cor(x,y)
x=(-100,100)
x=c(-100,100)
y=x^2
cor(x,y)
x=c(-100:100)
y=x^2
cor(x,y)
x=60
y=0.1*x-1
5-1.59
x=c(-100:100)
y=0.9*x
summary(lm(y~x))
summary(lm(x~y))
?scale
states <- row.names(USArrests)
names (USArrests)
#We first briefly examine the data. We notice that the variables have vastly different means.
apply ( USArrests , 2 , mean )
#prcomp() function, which is one of several functions in R that perform PCA
#By default, the prcomp() function centers the variables to have mean zero
pr.out <- prcomp (USArrests , scale = TRUE)
names(pr.out)
#The rotation matrix provides the principal component loadings
pr.out$rotation
#50  (states)Ã 4 (PCA component) matrix x has as its columns the principal component score vectors
dim(pr.out$x)
#The scale = 0 argument to biplot() ensures that the arrows are scaled to represent the loadings
biplot (pr.out , scale = 0)
X <- data.matrix (scale(USArrests))
pcob <- prcomp (X)
summary (pcob)
sX <- svd(X)
names (sX)
round (sX $v, 3)
#The matrix u is equivalent to the matrix of standardized scores, and the
#standard deviations are in the vector d. We can recover the score vectors
#using the output of svd(). They are identical to the score vectors output by prcomp().
pcob$rotation
t(sX$d * t (sX $u))
nomit <- 20
set.seed (15)
ina <- sample ( seq (50) , nomit )
inb <- sample (1:4 , nomit , replace = TRUE )
Xna <- X
index.na <- cbind ( ina , inb )
Xna[ index.na ] <- NA
View(Xna)
View(Xna)
fit.svd <- function (X , M = 1) {
svdob <- svd (X)
with(svdob,
u[ , 1:M , drop = FALSE ] %*%
(d[1:M] * t (v[ , 1:M , drop = FALSE ]) )
)
}
Xhat <- Xna
xbar <- colMeans ( Xna,na.rm = TRUE )
Xhat [ index.na ] <- xbar [ inb ]
thresh <- 1e-7
rel_err <- 1
iter <- 0
ismiss <- is.na(Xna)
mssold <- mean (( scale ( Xna , xbar , FALSE ) [! ismiss ]) ^2)
mss0 <- mean ( Xna [! ismiss ]^2)
while ( rel_err > thresh ) {
iter <- iter + 1
# Step 2( a )
Xapp <- fit.svd ( Xhat , M = 1)
# Step 2( b )
Xhat [ ismiss ] <- Xapp [ ismiss ]
# Step 2( c )
mss <- mean ((( Xna - Xapp ) [! ismiss ]) ^2)
rel_err <- ( mssold - mss ) / mss0
mssold <- mss
cat ( "Iter :" , iter , "MSS :" , mss ,
"Rel.Err :" , rel_err , " \ n " )
}
?solve
9/32
?pnorm
?pbinom
pbinom(9,32,0.01)
pbinom(9,32,0.23)
47/62
hist(rbinom(9,32,0.01))
hist(rbinom(9,32,0.1))
hist(rbinom(9,32,0.3))
rbinom(9,32,0.3)
hist(rbinom(100,32,0.3))
181-63
63/118
63/181
sqrt(181*0.348*(1-0.348))
sqrt((1-0.348)*0.348/181)
0.348-1.96*0.0354
0.348+1.96*0.0354
0.279/(1-0.279)
0.417*(1-0.417)
0.417/(1-0.417)
(63/118)/(12/40)
log((63/118)/(12/40))
75/(181+52)
a=(1/181)*(1/(0.322*(1-0.322)))
b=(1/52)*(1/(0.322*(1-0.322)))
c=1/(sqrt(a+b))
0.5764/2.97
pnorm(-0.194)
a=(1/75)*(1/(0.322*(1-0.322)))
b=(1/158)*(1/(0.322*(1-0.322)))
c=1/(sqrt(a+b))
pie=0.322
a=1/(75*pie*(1-pie))
b=1/(158*pie*(1-pie))
sqrt(a+b)
0.5764/0.3
pnorm(1.92)
1-pnorm(1.92)
a=1/(181*pie*(1-pie))
b=1/(52*pie*(1-pie))
sqrt(a+b)
0.5764/0.336
0.5764/0.3367
1-pnorm(1.712)
(1-pnorm(1.712))*2
(142/199858)/(56/199944)
log((142/199858)/(56/199944))
(142+56)/400000
200000*0.000495*(1-0.000495)
2/(200000*0.000495*(1-0.000495))
sqrt(2/(200000*0.000495*(1-0.000495)))
0.9309/(sqrt(2/(200000*0.000495*(1-0.000495))))
pnorm(-6.547841)
142/198
0.48052/0.2
pie=5/52
se=sqrt(pie*(1-pie)/52)
se
pie-1.96*se
pie+1.96*se
181-39
(39/142)/(5/47)
log(2.58169)
(39+5)/(181+52)
a=1/(181*0.18884*(1-0.18884))
b=1/(52*0.18884*(1-0.18884))
c=sqrt(a+b)
0.94844/c
pnorm(-2.359)
pnorm(2.359)
pnorm(-2.359)*2
pie=44/(181+52)
sqrt((pie*(1-pie)*((1/181)+(1/52))))
(0.18884*(1-0.18884)*(1/181+1/52))
sqrt(0.003792054)
(39/181)-(5/52)
se=sqrt((pie*(1-pie)*((1/181)+(1/52))))
0.1193158/se
39/181
5/52
pnorm(-1.93758)
?prop.test
x=(39,5)
x=c(39,5)
n=c(181,52)
prop.test(x,n)
prop.test(x,n,correct = F)
pnorm(-1.93758)*2
?fisher.test
as.table(x,n-x)
table(x,n-x)
test=as.data.frame(c(x,n-x))
View(test)
test=as.data.frame(c(x,n-x),ncol=2)
test=as.matrix(c(x,n-x),ncol=2)
View(test)
?as.matrix
test=matrix(c(x,n-x),ncol=2)
fisher.test(test)
52*0.18884
(39/142)/(5/47)
log(2.58169)
44/(181+52)
sqrt((1/(181*pie*(1-pie)))+(1/(52*pie*(1-pie))))
log(2.58169)/0.4020089
pnorm(-2.359262)
pnorm(-2.359262)*2
chisq.test(test)
(1/39)+(1/142)+(1/5)+(1/47)
se=sqrt((1/39)+(1/142)+(1/5)+(1/47))
0.94844/se
181*0.18884*(1-0.18884)
a=1/181*0.18884*(1-0.18884)
52*0.18884*(1-0.18884)
1/52*0.18884*(1-0.18884)
b=1/52*0.18884*(1-0.18884)
a+b
sqrt(a+b)
0.94844/0.06157966
a=1/(181*0.18884*(1-0.18884))
181*0.18884*(1-0.18884)
1/27.72548
a=1/27.72548
52*0.18884*(1-0.18884)
1/7.965332
b=1/7.965332
c=sqrt(a+b)
0.94844/c
p=0.2
n=30
?rbinom
x=rbinom(30,2000,0.2)
x=rbinom(2000,30,0.2)
output=as.data.frame(x)
View(output)
output$lower=NA
output$upper=NA
p=0.2
n=30
set.seed(123)
x=rbinom(2000,n,p)
output=as.data.frame(x)
output$lower=NA
output$upper=NA
for (i in 1:2000) {
pie_i=x/n
output$lower[i]=pie_i-1.96*sqrt(pie_i*(1-pie_i)/n)
output$upper[i]=pie_i+1.96*sqrt(pie_i*(1-pie_i)/n)
}
for (i in c(1:2000)) {
pie_i=x/n
output$lower[i]=pie_i-1.96*sqrt(pie_i*(1-pie_i)/n)
output$upper[i]=pie_i+1.96*sqrt(pie_i*(1-pie_i)/n)
}
i
for (i in c(1:2000)) {
pie_i=output$x[i]/n
output$lower[i]=pie_i-1.96*sqrt(pie_i*(1-pie_i)/n)
output$upper[i]=pie_i+1.96*sqrt(pie_i*(1-pie_i)/n)
}
p=0.2
n=30
set.seed(123)
x=rbinom(2000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
for (i in c(1:2000)) {
pie_i=output$x[i]/n
output$lower[i]=pie_i-1.96*sqrt(pie_i*(1-pie_i)/n)
output$upper[i]=pie_i+1.96*sqrt(pie_i*(1-pie_i)/n)
}
output$lower[output$lower <= 0]=0
output$upper[output$upper >= 1]=1
sum(0.2 >=output$lower)
for (i in c(1:2000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
}
output$cover=NA
p=0.2
n=30
set.seed(123)
x=rbinom(2000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
output$cover=NA
for (i in c(1:2000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
output$cover[i]=ifelse(output$lower[i] <= 0.2 & output$upper[i] >= 0.2,1,0)
}
sum(output$cover)/2000
set.seed(123)
x=rbinom(20000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
output$cover=NA
for (i in c(1:20000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
output$cover[i]=ifelse(output$lower[i] <= 0.2 & output$upper[i] >= 0.2,1,0)
}
sum(output$cover)/20000
p=0.2
n=30
set.seed(123)
x=rbinom(50000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
output$cover=NA
for (i in c(1:50000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
output$cover[i]=ifelse(output$lower[i] <= 0.2 & output$upper[i] >= 0.2,1,0)
}
sum(output$cover)/50000
p=0.2
n=30
set.seed(123)
x=rbinom(20000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
output$cover=NA
for (i in c(1:20000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
output$cover[i]=ifelse(output$lower[i] <= 0.2 & output$upper[i] >= 0.2,1,0)
}
sum(output$cover)/20000
p=0.2
n=98
set.seed(123)
x=rbinom(20000,n,p)
output=as.data.frame(x)
output$pie=x/n
output$lower=NA
output$upper=NA
output$cover=NA
for (i in c(1:20000)) {
pie_i=output$x[i]/n
output$lower[i]= ifelse(pie_i-1.96*sqrt(pie_i*(1-pie_i)/n) <= 0,0,pie_i-1.96*sqrt(pie_i*(1-pie_i)/n))
output$upper[i]=ifelse(pie_i+1.96*sqrt(pie_i*(1-pie_i)/n) >= 1,1,pie_i+1.96*sqrt(pie_i*(1-pie_i)/n))
output$cover[i]=ifelse(output$lower[i] <= 0.2 & output$upper[i] >= 0.2,1,0)
}
sum(output$cover)/20000
172*0.9
pnorm(0.01417)
pnorm(0.01417,lower.tail = F)
pchisq(0.335,1)
?pchisq
pchisq(0.335,1,lower.tail = F)
a=matrix(data=c(17,12,14,7),ncol = 2,byrow = T)
View(a)
fisher.test(a)
pt(2,9)
pt(2,9,lower.tail = F)
pt(2,19,lower.tail = F)
pt(22,19,lower.tail = F)
pt(5,19,lower.tail = F)
pt(5,9,lower.tail = F)
?binom.test
?binom.exact
install.packages("epitools")
library(epitools)
?binom.exact
binom.exact(50,50)
fisher.test(matrix(data=c(1,7,6,2),ncol=2,byrow = T))
?fisher.test
fisher.test(matrix(data=c(1,7,6,2),ncol=2,byrow = T),alternative = 'greater')
fisher.test(matrix(data=c(1,7,6,2),ncol=2,byrow = T),alternative = 'less')
fisher.test(matrix(data=c(7,1,6,2),ncol=2,byrow = T),alternative = 'greater')
fisher.test(matrix(data=c(1,7,6,2),ncol=2,byrow = T),alternative = 'greater')
fisher.test(matrix(data=c(7,1,2,6),ncol=2,byrow = T),alternative = 'greater')
binom.test(616,1090,p=9/16)
prop.test(616,1090,p=9/16)
binom.exact(50,50)
qnorm(0.95)
qnorm(0.75)
(qnorm(0.95)+qnorm(0.75))^2/0.09
prop.test(616,1060,p=9/16)
prop.test(616,1090,p=9/16)
?prop.test
prop.test(616,1090,p=9/16,correct = F)
chisq.test(x=c(83,77,110,92,51,48,70,85),p=(replicate(9/16,8)))
replicate(9/16,8)
?repeat
d
rep(9/16,8)
chisq.test(x=c(83,77,110,92,51,48,70,85),p=(rep(9/16,8)))
?chisq.test
test=matrix(data=c(83,77,110,92,51,48,70,85,47,43,96,58,31,61,42,66),nrow = 2,byrow = T)
View(test)
chisq.test(test,correct = F)
prop.test(7,8,correct = F)
prop.test(7,8)
binom.exact(7,1)
binom.exact(7,8)
binom.test(7,8)
?binom.test
binom.test(1,8)
test=matrix(data=c(1,7,6,2),ncol = 2,byrow = T)
chisq.test(test,correct = F)
fisher.test(test)
?mantelhaen.test
106*313/939
#Q3.
q3b=matrix(data=c(5,5,3,17),nrow = 2,byrow = T)
View(q3b)
fisher.test(q3b)
?fisher.test
qnorm(0.8,lower.tail = T)
qnorm(0.95,lower.tail = T)
qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T)
2.926405^2
8.563846*2
2*(qnorm(0.975,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
4*0.4*((qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T))^2)
2*(qnorm(0.955,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
2*(qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
1.6*(qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
1.6*(qnorm(0.975,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
1.6*(qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
2*(qnorm(0.95,lower.tail = T)+qnorm(0.9,lower.tail = T))^2
106*313/939
fisher.test(q3b)
RStudio.Version()
2190.90-1864.45
326.45/(1864.45/38)
(326.45/5)/(1864.45/38)
install.packages("dslabs")
?names
?seq
seq(from=12,to=73)
49/50
9*8*7/6
1/84
pt(2.21,df=11,lower.tail = F)
?wilcox.test
x=(8,10,22,12,-6,11,-1,4,-6,6,2,0)
x=c(8,10,22,12,-6,11,-1,4,-6,6,2,0)
wilcox.test(x,alternative = 'greater')
T <- length(x[x >0])
binom.test(T,12,0.5)
## Paired data
## Wilcoxon signed rank and sign test
diff <- c(0.67,-0.19,0.09,0.19,0.13,0.4,0.04,0.1,0.5,0.07,0.23,0.59,0.02,0.03,0.11)
T <- length(diff[diff >0])
binom.test(T,15,0.5)
binom.test(T,12,0.5)
binom.test(T,12,0.5)
T <- length(x[x >0])
binom.test(T,12,0.5)
?binom.test
pchisq(6.349,df=1)
pchisq(6.349,df=1,lower.tail = F)
pchisq(10/9,df=1)
pchisq(10/9,df=1,lower.tail = F)
pchisq(35,df=3,lower.tail = F)
28*28
2063/12
230/4
230/4+50
1486*0.67
1567*0.67
971/6
28207.25+250
28207.25+250-5500-7500
28207.25+250-5500-7500+28457.25*0.0625
load("C:/Users/becky/OneDrive/Desktop/2023 summer intern/Data/purified_data/distance.RData")
View(m)
load("C:/Users/becky/OneDrive/Desktop/2023 summer intern/Data/purified_data/distance.RData")
require(stats)
X <- matrix(runif(200), 20, 10)
d <- dist(X)
d
M <- mst(d)
setwd('C:\\Users\\becky\\OneDrive\\Desktop\\2023 summer intern\\Data\\purified_data')
library(ape)
library(dplyr)
### Graph info
original=read.csv('antibiogram_VAMP.csv')
length(unique(original$variants))
feature=unique(original$variants)
original_long=as.data.frame(matrix(data=NA,nrow=length(unique(original$sample_id)),ncol=length(unique(original$variants))))
rownames(original_long)=unique(original$sample_id)
colnames(original_long)=feature
length(unique(original$sample_id))
length(feature)
for(i in 1:length(unique(original$sample_id))){
sample_i=unique(original$sample_id)[i]
sample_i_feature=original$variants[original$sample_id==sample_i]
for(j in 1:length(feature)){
feature_j=feature[j]
if(feature_j %in% sample_i_feature){
original_long[i,j]=1
}else{original_long[i,j]=0}
}
print(i)
}
23284/32
23284/16
23284/4
